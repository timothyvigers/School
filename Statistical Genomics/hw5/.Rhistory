knitr::opts_chunk$set(echo=TRUE)
knitr::opts_knit$set(root.dir="/home/tim/Documents/GitHub/School/Statistical Genomics/hw5")
library(RNASeqPower)
library(edgeR)
library(cqn)
library(tidyverse)
data(montgomery.subset)
data(uCovar)
# Parameters
depths = seq(1,50)
effect = 2
alpha = 0.01
power = 0.8
# Calculate n
cv0.4 = rnapower(depths,cv = 0.4,effect = effect,alpha = alpha,power = power)
cv0.8 = rnapower(depths,cv = 0.8,effect = effect,alpha = alpha,power = power)
cv1.2 = rnapower(depths,cv = 1.2,effect = effect,alpha = alpha,power = power)
# Plotting data
fig3_data = as.data.frame(cbind(depths,cv0.4,cv0.8,cv1.2))
fig3_data = fig3_data %>% pivot_longer(cv0.4:cv1.2)
# Plot
ggplot(fig3_data,aes(x=depths,y=value,color=name)) +
geom_point() + geom_line() +
theme_bw() + xlab("Gene Depth") + ylab("Samples Required") +
scale_color_discrete(name="",labels=c("CV = 0.4","CV = 0.8","CV = 1.2"))
View(montgomery.subset)
View(uCovar)
help(montgomery.subset)
View(montgomery.subset)
table_1 = montgomery.subset %>%
summarise(ID="m",Sample="Montgomery",`Sample Type`="lymphoblastoid cell lines")
View(table_1)
table_1 = montgomery.subset %>%
summarise(ID="m",Sample="Montgomery",`Sample Type`="lymphoblastoid cell lines",
n=ncol())
table_1 = montgomery.subset %>%
summarise(ID="m",Sample="Montgomery",`Sample Type`="lymphoblastoid cell lines",
n=ncol(.))
View(table_1)
View(uCovar)
mean(montgomery.subset)
mean(montgomery.subset,na.rm = T)
str(montgomery.subset)
data(sizeFactors.subset)
sum(montgomery.subset[,1])
sizeFactors.subset
sum(montgomery.subset[,"NA06985"])
mean(rowSums(montgomery.subset))
View(uCovar)
?cwn
?cqn
browseVignettes("cqn")
montgomery.subset$total <- rowSums(montgomery.subset)
montgomery.subset$per_mill = montgomery.subset$total / 1000000
View(montgomery.subset)
View(uCovar)
?estimateTagwiseDisp
data("montgomery.subset")
View(montgomery.subset)
e = estimateTagwiseDisp(montgomery.subset)
browseVignettes("edgeR")
edgeRUsersGuide()
y <- matrix(rnbinom(250*4,mu=20,size=5),nrow=250,ncol=4)
View(y)
View(montgomery.subset)
typeof(montgomery.subset)
typeof(y)
data(montgomery.subset)
e = estimateTagwiseDisp(as.numeric(montgomery.subset))
as.matrix(montgomery.subset)
typeof(as.matrix(montgomery.subset))
e = estimateTagwiseDisp(matrix(montgomery.subset))
?matrix
e = estimateTagwiseDisp(data.matrix(montgomery.subset))
c = estimateCommonDisp(montgomery.subset)
e = estimateTagwiseDisp(montgomery.subset,dispersion = c)
# Histogram
hist(e)
ecdf(e)
cdf <- ecdf(e)
?ecdf
plot(ecdf(e))
edgeRUsersGuide()
# Get common dispersion estimate
e = estimateCommonDisp(montgomery.subset)
# Estimate biological CV
e = estimateTagwiseDisp(montgomery.subset)
# Get common dispersion estimate
c = estimateCommonDisp(montgomery.subset)
# Estimate biological CV
e = estimateTagwiseDisp(montgomery.subset,dispersion = c)
# Histogram
hist(e)
plot(ecdf(e))
View(montgomery.subset)
help("montgomery.subset")
quantile(e)
?quantile
quantile(e,probs = seq(0, 1, 0.25))
quantile(e,probs = seq(0, 1, 0.1))
# Get common dispersion estimate
c = estimateCommonDisp(montgomery.subset)
# Estimate biological CV
e = estimateTagwiseDisp(montgomery.subset,dispersion = c)
# Histogram
hist(e)
plot(ecdf(e))
quantile(e,probs = seq(0, 1, 0.1))
# Histogram
hist(e,main = "Histogram of Tagwise Dispersion Estimates")
# Histogram
hist(e,main = "Histogram of Tagwise Dispersion Estimates",xlab = "Estimate")
plot(ecdf(e))
?ecdf
# Get common dispersion estimate
c = estimateCommonDisp(montgomery.subset)
# Estimate biological CV
e = estimateTagwiseDisp(montgomery.subset,dispersion = c)
# Histogram
hist(e,main="Histogram of Tagwise Dispersion Estimates",xlab = "Estimate")
plot(ecdf(e),main="Empirical CDF of Tagwise Dispersion Estimates")
quantile(e,probs = seq(0, 1, 0.1))
# Calculate n
cv_median = rnapower(depths,cv = median(e),effect = effect,alpha = alpha,
power = power)
quantile(e,0.9)
cv_90 = rnapower(depths,cv = quantile(e,0.9),effect = effect,alpha = alpha,
power = power)
# Plotting data
fig3_data_2 = as.data.frame(cbind(depths,cv_median,cv_90))
fig3_data_2 = fig3_data_2 %>% pivot_longer(cv0.4:cv1.2)
# Plotting data
fig3_data_2 = as.data.frame(cbind(depths,cv_median,cv_90))
fig3_data_2 = fig3_data_2 %>% pivot_longer(cv_median,cv_90)
# Plotting data
fig3_data_2 = as.data.frame(cbind(depths,cv_median,cv_90))
fig3_data_2 = fig3_data_2 %>% pivot_longer(cv_median,cv_90)
# Plotting data
fig3_data_2 = as.data.frame(cbind(depths,cv_median,cv_90))
fig3_data_2 = fig3_data_2 %>% pivot_longer(cv_median:cv_90)
# Plot
ggplot(fig3_data_2,aes(x=depths,y=value,color=name)) +
geom_point() + geom_line() +
theme_bw() + xlab("Gene Depth") + ylab("Samples Required") +
scale_color_discrete(name="",labels=c("CV = 0.4","CV = 0.8","CV = 1.2"))
plot(ecdf(e),main="Empirical CDF of Tagwise Dispersion Estimates",xlab="CV")
quantile(e,seq(0,1,0.1))
# Calculate n
cv_median = rnapower(depths,cv = median(e),effect = effect,alpha = alpha,
power = power)
cv_90 = rnapower(depths,cv = quantile(e,0.9),effect = effect,alpha = alpha,
power = power)
# Plotting data
fig3_data_2 = as.data.frame(cbind(depths,cv_median,cv_90))
fig3_data_2 = fig3_data_2 %>% pivot_longer(cv_median:cv_90)
# Plot
ggplot(fig3_data_2,aes(x=depths,y=value,color=name)) +
geom_point() + geom_line() +
theme_bw() + xlab("Gene Depth") + ylab("Samples Required") +
scale_color_discrete(name="",labels=c("Median CV","90th %ile CV"))
quantile(e,0.9)
# Plot
ggplot(fig3_data_2,aes(x=depths,y=value,color=name)) +
geom_point() + geom_line() +
theme_bw() + xlab("Gene Depth") + ylab("Samples Required") +
scale_color_discrete(name="",labels=c("Median CV","90th %ile CV"))
# Get common dispersion estimate
c = estimateCommonDisp(montgomery.subset)
# Estimate biological CV
e = estimateTagwiseDisp(montgomery.subset,dispersion = c)
# Histogram
hist(e,main="Histogram of Tagwise Dispersion Estimates",xlab = "Estimate")
plot(ecdf(e),main="Empirical CDF of Tagwise Dispersion Estimates",xlab="CV")
?rnapower
# Plot power as a function of fold change
rnapower(depth=depth,cv=cv,alpha=alpha,effect=seq(1:8,0.1))
# Plot power as a function of fold change
rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=seq(1:8,0.1))
# Set parameters
n = 20
depth = 100
cv = 0.32
alpha = 0.001
# Plot power as a function of fold change
rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=seq(1:8,0.1))
# Plot power as a function of fold change
rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=seq(1,8,0.1))
# Plot power as a function of fold change
p = rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=seq(1,8,0.01))
plot(effects,p)
effects = seq(1,8,0.01)
# Plot power as a function of fold change
p = rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=effects)
plot(effects,p)
plot_data = as.data.frame(cbind(effects,p))
ggplot(plot_data,aes(x=effects,y=p))
ggplot(plot_data,aes(x=effects,y=p)) + geom_point() + geom_line()
ggplot(plot_data,aes(x=effects,y=p)) + geom_point() + geom_line() +
theme_bw()
log(effects,base = 2)
ggplot(plot_data,aes(x=log(effects,base = 2),y=p)) + geom_point() + geom_line() +
theme_bw()
ggplot(plot_data,aes(x=effects,y=p)) + geom_point() + geom_line() +
theme_bw() + ylab("Power") + xlab("Fold Change")
cv = quantile(e,0.6)
# Set parameters
n = 20
depth = 100
cv = quantile(e,0.6)
alpha = 0.001
effects = seq(1,8,0.01)
# Plot power as a function of fold change
p = rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=effects)
plot_data = as.data.frame(cbind(effects,p))
ggplot(plot_data,aes(x=effects,y=p)) + geom_point() + geom_line() +
theme_bw() + ylab("Power") + xlab("Fold Change")
# Set parameters
n = 20
depth = 100
cv = quantile(e,0.6)
alpha = 0.001
effects = seq(1,8,0.01)
# Plot power as a function of fold change
p = rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=effects)
plot_data = as.data.frame(cbind(effects,p))
ggplot(plot_data,aes(x=effects,y=p)) + geom_line() +
theme_bw() + ylab("Power") + xlab("Fold Change")
BiocManager::install(c("yeastRNASeq","EDASeq"))
data(geneLevelData)
data(yeastGC)
data(yeastLength)
BiocManager::install()
knitr::opts_chunk$set(echo=TRUE)
knitr::opts_knit$set(root.dir="/home/tim/Documents/GitHub/School/Statistical Genomics/hw5")
library(RNASeqPower)
library(edgeR)
library(cqn)
library(yeastRNASeq)
library(EDASeq)
library(tidyverse)
data(geneLevelData)
data(yeastGC)
data(yeastLength)
View(geneLevelData)
length(which(rowSums(geneLevelData)==0))
all_zero = length(which(rowSums(geneLevelData)==0))
all_zero
geneLevelData==T
geneLevelData==0
one_zero = length(which(rowSums(geneLevelData==0)>0))
one_zero
geneLevelDataFilter = geneLevelData[which(rowSums(geneLevelData)>=10),]
exprs = as.matrix(geneLevelDataFilter) # matrix of counts
sub = intersect(rownames(geneLevelDataFilter), names(yeastGC))
exprs = exprs[sub,] # only examine genes with annotated GC content/length
row.names(exprs) = NULL # remove row and column names
colnames(exprs) = NULL
# Create SeqExpressionSet, which contains counts, labels for the
# samples and GC content/length
counts = newSeqExpressionSet(counts=exprs,
phenoData=data.frame(conditions = colnames(geneLevelDataFilter)),
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub],
length = yeastLength[sub])))
?EDASeq
?EDASeq::boxplot
?EDASeq::`boxplot,SeqExpressionSet-method`
EDASeq::boxplot(counts)
type(count)
View(counts)
EDASeq::boxplot(counts)
EDASeq::boxplot(counts)
View(geneLevelData)
meanVarPlot(counts)
?meanVarPlot
meanVarPlot(counts,log=T)
EDASeq::boxplot(counts,log=T)
?EDASeq::`boxplot,SeqExpressionSet-method`
EDASeq::boxplot(counts)
2^8
View(counts)
?meanVarPlot
?biasPlot
biasPlot(counts,"gc",log=T)
help("montgomery.subset")
sizeFactors.subset
biasPlot(counts)
sub <- intersect(rownames(geneLevelData), names(yeastGC))
mat <- as.matrix(geneLevelData[sub,])
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))),
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
biasPlot(data,"gc",ylim=c(0,5),log=TRUE)
biasPlot(counts,"gc",ylim=c(0,5),log=TRUE)
View(counts)
biasPlot(counts,"gc",log=TRUE)
knitr::opts_chunk$set(echo=TRUE)
knitr::opts_knit$set(root.dir="/home/tim/Documents/GitHub/School/Statistical Genomics/hw5")
library(RNASeqPower)
library(edgeR)
library(cqn)
library(yeastRNASeq)
library(EDASeq)
library(tidyverse)
data(montgomery.subset)
data(uCovar)
# Parameters
depths = seq(1,50)
effect = 2
alpha = 0.01
power = 0.8
# Calculate n
cv0.4 = rnapower(depths,cv = 0.4,effect = effect,alpha = alpha,power = power)
cv0.8 = rnapower(depths,cv = 0.8,effect = effect,alpha = alpha,power = power)
cv1.2 = rnapower(depths,cv = 1.2,effect = effect,alpha = alpha,power = power)
# Plotting data
fig3_data = as.data.frame(cbind(depths,cv0.4,cv0.8,cv1.2))
fig3_data = fig3_data %>% pivot_longer(cv0.4:cv1.2)
# Plot
ggplot(fig3_data,aes(x=depths,y=value,color=name)) +
geom_point() + geom_line() +
theme_bw() + xlab("Gene Depth") + ylab("Samples Required") +
scale_color_discrete(name="",labels=c("CV = 0.4","CV = 0.8","CV = 1.2"))
cols = c("Avg Reads","% mapped","< 0.01","0.01–.1","0.1–1","1–10","10–100","100–1000","> 1000")
table_1 = montgomery.subset %>%
summarise(ID="m",Sample="Montgomery",`Sample Type`="lymphoblastoid cell lines",
n=ncol(.),`Read Type`="PE")
# Get common dispersion estimate
c = estimateCommonDisp(montgomery.subset)
# Estimate biological CV
e = estimateTagwiseDisp(montgomery.subset,dispersion = c)
# Histogram
hist(e,main="Histogram of Tagwise Dispersion Estimates",xlab = "Estimate")
plot(ecdf(e),main="Empirical CDF of Tagwise Dispersion Estimates",xlab="CV")
# Calculate n
cv_median = rnapower(depths,cv = median(e),effect = effect,alpha = alpha,
power = power)
cv_90 = rnapower(depths,cv = quantile(e,0.9),effect = effect,alpha = alpha,
power = power)
# Plotting data
fig3_data_2 = as.data.frame(cbind(depths,cv_median,cv_90))
fig3_data_2 = fig3_data_2 %>% pivot_longer(cv_median:cv_90)
# Plot
ggplot(fig3_data_2,aes(x=depths,y=value,color=name)) +
geom_point() + geom_line() +
theme_bw() + xlab("Gene Depth") + ylab("Samples Required") +
scale_color_discrete(name="",labels=c("Median CV","90th %ile CV"))
# Set parameters
n = 20
depth = 100
cv = quantile(e,0.6)
alpha = 0.001
effects = seq(1,8,0.01)
# Plot power as a function of fold change
p = rnapower(depth=depth,n=n,cv=cv,alpha=alpha,effect=effects)
plot_data = as.data.frame(cbind(effects,p))
ggplot(plot_data,aes(x=effects,y=p)) + geom_line() +
theme_bw() + ylab("Power") + xlab("Fold Change")
data(geneLevelData)
data(yeastGC)
data(yeastLength)
all_zero = length(which(rowSums(geneLevelData)==0))
one_zero = length(which(rowSums(geneLevelData==0)>0))
geneLevelDataFilter = geneLevelData[which(rowSums(geneLevelData)>=10),]
exprs = as.matrix(geneLevelDataFilter) # matrix of counts
sub = intersect(rownames(geneLevelDataFilter), names(yeastGC))
exprs = exprs[sub,] # only examine genes with annotated GC content/length
row.names(exprs) = NULL # remove row and column names
colnames(exprs) = NULL
# Create SeqExpressionSet, which contains counts, labels for the
# samples and GC content/length
counts =
newSeqExpressionSet(counts=exprs,
phenoData=data.frame(conditions = colnames(geneLevelDataFilter)),
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub],length = yeastLength[sub])))
EDASeq::boxplot(counts)
meanVarPlot(counts,log=T)
biasPlot(counts,"gc",log=TRUE)
biasPlot(counts,"gc")
biasPlot(data,"gc",ylim=c(0,5),log=TRUE)
counts@phenoData
t <- counts@phenoData
View(t)
biasPlot(counts,"gc",log=TRUE,color_code = 2)
biasPlot(counts,"gc",log=TRUE,color_code = 1)
exprs = as.matrix(geneLevelDataFilter) # matrix of counts
sub = intersect(rownames(geneLevelDataFilter), names(yeastGC))
exprs = exprs[sub,] #only examine genes with annotated GC content/length
row.names(exprs) = NULL #remove row and column names
colnames(exprs) = NULL
#Create SeqExpressionSet, which contains counts, labels for the
#samples and GC content/length
counts = newSeqExpressionSet(counts=exprs,
phenoData=data.frame(conditions = colnames(geneLevelDataFilter)),
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub],
length = yeastLength[sub])))
biasPlot(counts,"gc",log=TRUE,color_code = 1)
exprs = as.matrix(geneLevelDataFilter) # matrix of counts
sub = intersect(rownames(geneLevelDataFilter), names(yeastGC))
exprs = exprs[sub,] #only examine genes with annotated GC content/length
row.names(exprs) = NULL #remove row and column names
colnames(exprs) = NULL
#Create SeqExpressionSet, which contains counts, labels for the
#samples and GC content/length
counts = newSeqExpressionSet(counts=exprs,
phenoData=data.frame(conditions = factor(c("mut","mut","wt","wt"))),
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub],
length = yeastLength[sub])))
biasPlot(counts,"gc",log=TRUE)
biasPlot(counts,"length",log=TRUE)
biasPlot(counts,"length",log=TRUE)
?withinLaneNormalization
loess = withinLaneNormalization(counts,"gc",which = "loess")
biasPlot(loess)
biasPlot(loess,"gc")
biasPlot(loess,"gc",log=TRUE)
biasPlot(loess,"gc")
biasPlot(loess,"gc",log=TRUE)
full = withinLaneNormalization(counts,"gc",which = "full")
biasPlot(full,"gc",log=TRUE)
upper = withinLaneNormalization(counts,"gc",which = "upper")
biasPlot(upper,"gc",log=TRUE)
biasPlot(median,"gc",log=TRUE)
median = withinLaneNormalization(counts,"gc",which = "median")
biasPlot(median,"gc",log=TRUE)
?betweenLaneNormalization
?withinLaneNormalization
library(yeastRNASeq)
data(geneLevelData)
data(yeastGC)
sub <- intersect(rownames(geneLevelData), names(yeastGC))
mat <- as.matrix(geneLevelData[sub, ])
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))),
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
View(data)
?betweenLaneNormalization
loess_median = betweenLaneNormalization(loess,"median")
boxplot(loess_median)
loess_median = betweenLaneNormalization(loess,"median")
boxplot(loess_median)
loess_upper = betweenLaneNormalization(loess,"upper")
boxplot(loess_upper)
loess_full = betweenLaneNormalization(loess,"full")
boxplot(loess_full)
median_median = betweenLaneNormalization(median,"median")
boxplot(median_median)
median_upper = betweenLaneNormalization(median,"upper")
boxplot(median_upper)
median_full = betweenLaneNormalization(median,"full")
boxplot(median_full)
upper_median = betweenLaneNormalization(upper,"median")
upper_median = betweenLaneNormalization(upper,"median")
boxplot(upper_median)
upper_upper = betweenLaneNormalization(upper,"upper")
boxplot(upper_upper)
upper_full = betweenLaneNormalization(upper,"full")
boxplot(upper_full)
full_median = betweenLaneNormalization(full,"median")
boxplot(full_median)
full_upper = betweenLaneNormalization(full,"upper")
boxplot(full_upper)
library(patchwork)
browseVignettes("patchwork")
b <- boxplot(loess_median)
b + b1
b <- boxplot(loess_median)
b1 <- boxplot(loess_full)
b + b1
?`boxplot,SeqExpressionSet-method`
par(mfrow=c(3,4))
boxplot(loess_median)
boxplot(median_median)
boxplot(upper_median)
boxplot(full_median)
counts@experimentData
counts@featureData
boxplot(loess_median,main="Loess-Median")
