knitr::opts_chunk$set(echo=TRUE,dpi = 600)
library(shinyMethyl)
library(minfi)
library(bumphunter)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(arsenal)
baseDir = "C:/Users/tim/Dropbox/Documents/School/Statistical Genomics/Homework Files/HW7/idats"
targets = read.metharray.sheet(baseDir)
rgSet = read.metharray.exp(targets = targets)
annotation(rgSet)
df = as.data.frame(pData(rgSet))
df = df[df$Status == "cancer",]
t1 = tableby(~ patient.age_at_initial_pathologic_diagnosis +
patient.height + patient.weight + Sex +  patient.race,
data = df)
summary(t1,labelTranslations =
list(patient.age_at_initial_pathologic_diagnosis =
"Age at Diagnosis",
patient.height = "Height",patient.weight = "Weight",
patient.race = "Race"))
getManifest(rgSet)
id = pData(rgSet)$id
densityPlot(rgSet,sampGroups = id)
densityBeanPlot(rgSet,sampGroups = id)
stype = pData(rgSet)$sample_type
densityPlot(rgSet,sampGroups = stype)
densityBeanPlot(rgSet,sampGroups = stype)
sex = pData(rgSet)$Sex
densityPlot(rgSet,sampGroups = sex)
densityBeanPlot(rgSet,sampGroups = sex)
controlStripPlot(rgSet,controls = "BISULFITE CONVERSION I")
controlStripPlot(rgSet,controls = "NEGATIVE")
# Count p values >= 0.05 per sample
detect = detectionP(rgSet)
colSums(detect >= 0.05)
# Row means
rmeans = rowMeans(detect)
mset = preprocessRaw(rgSet)
msetSWAN = preprocessSWAN(rgSet)
mdsPlot(msetSWAN)
load("C:/Users/tim/Documents/GitHub/School/Statistical Genomics/hw7/.RData")
?mdsPlot
knitr::opts_chunk$set(echo=TRUE,dpi = 600)
library(shinyMethyl)
library(minfi)
library(bumphunter)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(arsenal)
mdsPlot(msetSWAN,sampGroups = sex)
mdsPlot(msetSWAN,numPositions = 10000,sampGroups = sex)
mdsPlot(mset,sampGroups = sex)
mdsPlot(mset,numPositions = 10000,sampGroups = sex)
t = pData(rgSet)
t$sample_type
t$Status
mdsPlot(msetSWAN,numPositions = 10000,sampGroups = stype)
plotBetasByType(mset)
?plotBetasByType
plotBetasByType(mset)
plotBetasByType(rgSet)
?preprocessRaw
plotBetasByType(msetSWAN)
plotBetasByType(mset[,1])
plotBetasByType(mset[,1])
library(minfiData)
data(RGsetEx)
par(mfrow=c(6,2))
plotBetasByType(mset[,1])
par(mfrow=c(1,2))
plotBetasByType(mset[,1])
plotBetasByType(msetSWAN[,1])
mset[,1]
colnames(mset[,1])
i = 1
plotBetasByType(mset[,i],
main = paste(colnames(mset[,i]),"Before"))
par(mfrow=c(6,2))
for (i in 1:6) {
plotBetasByType(mset[,i],main = paste(colnames(mset[,i]),"Before"))
plotBetasByType(msetSWAN[,i],
main = paste(colnames(msetSWAN[,i]),"After"))
}
plotBetasByType(msetSWAN[,i],
main = paste(colnames(msetSWAN[,i]),"After"))
plotBetasByType(mset[,i],main = paste(colnames(mset[,i]),"Before"))
par(mfrow=c(6,2),mar=c(1,1,1,1))
for (i in 1:6) {
plotBetasByType(mset[,i],main = paste(colnames(mset[,i]),"Before"))
plotBetasByType(msetSWAN[,i],
main = paste(colnames(msetSWAN[,i]),"After"))
}
par(mfrow=c(6,2),mar=c(1,1,1,1))
for (i in 1:6) {
plotBetasByType(mset[,i],main = paste(colnames(mset[,i]),"Before"))
plotBetasByType(msetSWAN[,i],
main = paste(colnames(msetSWAN[,i]),"After"))
}
gset <-mapToGenome(msetSWAN)
gset <-mapToGenome(msetSWAN)
annotation <-getAnnotation(gset)
annotation
getAnnotation(gset)
View(annotation)
annotation$Type
annotation$Regulatory_Feature_Name
annotation$Name
annotation$CpG_rs
annotation$Islands_Name
annotation$Regulatory_Feature_Group
annotation$Relation_to_Island
install.packages("flextable")
library(flextable)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
flextable(.)
library(tidyverse)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
flextable(.)
t = table(annotation$Relation_to_Island)
t
sum(t)
?getAnnotation
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename("Feature","n") %>% flextable(.)
?rename
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(.,"Feature","n") %>% flextable(.)
table(annotation$Relation_to_Island)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(Var1 = "Feature") %>% flextable(.)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>% flextable(.)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename("Var1" = "Feature") %>% flextable(.)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(.,"Var1" = "Feature") %>% flextable(.)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(Var1 = Feature) %>% flextable(.)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(Var1 = Feature) %>% flextable(.)
t = table(annotation$Relation_to_Island) %>% as.data.frame(.)
View(t)
iris <- as_tibble(iris)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(.,Var1 = Feature) %>% flextable(.)
View(iris)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(.,Feature = Var1) %>% flextable(.)
table(annotation$Relation_to_Island) %>% as.data.frame(.) %>%
rename(.,Feature = Var1) %>% flextable(.)
?getM
m = getM(msetSWAN)
dmp = dmpFinder(m)
m = getM(msetSWAN)
dmp = dmpFinder(m)
m
?dmpFinder
t =  pData(rgSet)
t$sample_type
t$Status
pheno = pData(rgSet)$Status
dmp = dmpFinder(m,pheno = pheno)
dmp
View(dmp)
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
View(dmp)
sum(dmp$qval <= 0.1)
View(dmp)
data(MsetEx)
require(minfiData)
install.packages("minfiData")
BiocManager::install("minfiData")
library(minfiData)
grp <- pData(MsetEx)$Sample_Group
grp
pheno
factor(pheno)
View(dmp)
View(m)
m["cg05592581",]
m["cg08880423",]
flextable(head(dmp,10))
m = getM(msetSWAN)
pheno = pData(rgSet)$Status
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
flextable(head(dmp,10))
dmp = dmpFinder(m,pheno = pheno,type = "categorical") %>%
rownames_to_column(.)
View(dmp)
dmp %>% rownames_to_column(var = "CpG") %>% head(.,10) %>% flextable(.)
m = getM(msetSWAN)
pheno = pData(rgSet)$Status
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
dmp %>% rownames_to_column(var = "CpG") %>% head(.,10) %>% flextable(.)
m = getM(msetSWAN)
pheno = pData(rgSet)$Status
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
dmp %>% round(.,3) %>% rownames_to_column(var = "CpG") %>%
head(.,10) %>% flextable(.)
sum(dmp$pval <= 1e-5)
sum(dmp$intercept[dmp$pval <= 1e-5])
sum(dmp$intercept[dmp$pval <= 1e-5] > 0)
sum(dmp$intercept[dmp$pval <= 1e-5] < 0)
?plotCpg
sort(dmp$pval)
order(dmp$pval)
?order
dmp$pval[order(dmp$pval)]
top4 = dmp[order(dmp$pval)[1:4],]
View(top4)
top4 = rownames(dmp[order(dmp$pval)[1:4],])
top4
plotCpg(msetSWAN,cpg = top4,pheno)
pheno = pData(rgSet)$Sex
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
View(dmp)
m["cg10013343",]
pheno
m["cg13916877",]
sum(dmp$qval <= 0.1)
sum(dmp$pval <= 1e-5)
sum(dmp$intercept[dmp$pval <= 1e-5] > 0)
sum(dmp$intercept[dmp$pval <= 1e-5] <= 0)
sum(dmp$intercept[dmp$pval <= 1e-5] < 0)
top4 = rownames(dmp[order(dmp$pval)[1:4],])
plotCpg(msetSWAN,cpg = top4,pheno)
?addSex
addSex(msetSWAN)
addSex(mset)
gset <-mapToGenome(msetSWAN)
gset = addSex(gset)
cbind(pData(gset)$predictedSex, pData(gset)$Sex)
pred_sex =
as.data.frame(cbind(pData(gset)$predictedSex, pData(gset)$Sex))
colnames(pred_sex) = c("Predicted Sex","Label")
flextable(pred_sex)
View(mset)
pheno
mdsPlot(msetSWAN,sampGroups = pred_sex$`Predicted Sex`)
mdsPlot(msetSWAN,numPositions = 10000,sampGroups = pred_sex$`Predicted Sex`)
mdsPlot(msetSWAN,numPositions = 10000,sampGroups = pred)
pred = pred_sex$`Predicted Sex`
mdsPlot(msetSWAN,sampGroups = pred)
mdsPlot(msetSWAN,numPositions = 10000,sampGroups = pred)
dmp = dmpFinder(m,pheno = pred,type = "categorical")
sum(dmp$qval <= 0.1)
pheno = pData(rgSet)$Status
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
# Re-run for cancer status
pheno = pData(rgSet)$Status
dmp = dmpFinder(m,pheno = pheno,type = "categorical")
# Code from questions
diffs <- dmp$intercept
chr <- annotation$chr
pos <- annotation$pos
cl <- clusterMaker(chr, pos, maxGap = 300) # cluster probes
#Find regions with a stretch of differences
segs <- getSegments(diffs, f = cl, cutoff = 6)
#To plot the first region identified
j=1
ind = segs$dnIndex[[j]]
index <- which(cl==cl[ind])
plot(pos[index],diffs[index],
xlab=paste("position on", chr[ind]), ylab="diff")
